
    - name: Create /var/log/mysql  host directory if it does not exist
      file:
        path: /var/log/mysql
        state: directory
        owner: mysql
        group:  mysql


    - name: Template my.cnf file to /etc/my.cnf
      template:
          src: mysql_master_my.cnf.j2
          dest: /etc/my.cnf
          owner: root
          group:  root
      notify:
        restart mysql service

  # set mysql root password

    - name: Template a file to /tmp/update_mysql_root_pass.sql
      template:
          src: update_mysql_root_pass.j2
          dest: /tmp/update_mysql_root_pass.sql
          owner: root
          group:  root
          mode: '0600'

    - name: Execute /tmp/update_mysql_root_pass.sql
      shell: mysql < /tmp/update_mysql_root_pass.sql


    - name: Create db user for replication
      mysql_user:
        login_user: root
        login_password: '{{mysql_root_password}}'
        name: '{{mysql_replication_user}}'
        password: '{{mysql_repluser_pass}}'
        priv: "*.*:REPLICATION CLIENT"
        host: '{{mysql_slave_ip}}'
        state: present

    - name: Template and execute sql query to grant user proper privileges (bug in ansible, cant set multiple privileges)
      template:
          src: set_grants_for_replicator.sql.j2
          dest: /tmp/set_grants_for_replicator.sql
          owner: root
          group:  root
          mode: '0600'

    - name: Execute sql to grant user proper privileges (workaround due bug in ansible, cant set multiple privileges)
      shell: mysql <  /tmp/set_grants_for_replicator.sql
        # GRANT REPLICATION CLIENT, REPLICATION SLAVE ON *.* TO `replicator`@`192.168.1.141`

    - mysql_replication:
        login_user: root
        login_password: '{{mysql_root_password}}'
        mode: getmaster

    

  # handlers:



  #   - name: restart mysql service
  #     systemd:
  #         state: restarted
  #         daemon_reload: yes
  #         name: mysql
